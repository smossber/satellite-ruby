#!/usr/bin/env ruby

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

require 'optparse'
require 'yaml'
require 'apipie-bindings'
require 'highline/import'
require 'time'
require 'logging'
require 'awesome_print'

@defaults = {
  :noop        => false,
  :keep        => 5,
  :uri         => 'https://localhost',
  :timeout     => 300,
  :user        => 'admin',
  :pass        => nil,
  :org         => 1,
  :force       => false,
  :wait        => false,
  :sequential  => 0,
  :promote_cvs => false,
  :checkrepos  => false,
  :verbose     => false,
  :description => 'autopublish',
  :verify_ssl  => true,
}

@options = {
  :yamlfile  => 'cvmanager.yaml',
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} ACTION [options]"
  opts.version = "0.1"
  
  opts.separator ""
  opts.separator "#{opts.summary_indent}ACTION can be any of [clean,update,publish,promote]"
  opts.separator ""

  opts.on("-U", "--uri=URI", "URI to the Satellite") do |u|
    @options[:uri] = u
  end
  opts.on("-t", "--timeout=TIMEOUT", OptionParser::DecimalInteger, "Timeout value in seconds for any API calls. -1 means never timeout") do |t|
    @options[:timeout] = t
  end
  opts.on("-u", "--user=USER", "User to log in to Satellite") do |u|
    @options[:user] = u
  end
  opts.on("-p", "--pass=PASS", "Password to log in to Satellite") do |p|
    @options[:pass] = p
  end
  opts.on("-o", "--organization-id=ID", "ID of the Organization to manage CVs in") do |o|
    @options[:org] = o
  end
  opts.on("-k", "--keep=NUM", OptionParser::DecimalInteger, "how many unused versions should be kept") do |k|
    @options[:keep] = k
  end
  opts.on("-c", "--config=FILE", "configuration in YAML format") do |c|
    @options[:yamlfile] = c
  end
  opts.on("-l", "--to-lifecycle-environment=ID", "which LE should the promote be done to") do |l|
    @options[:lifecycle] = l
  end
  opts.on("-w", "--content-view=ID", "which Content View targeted for promition") do |w|
    @options[:content_view] = w
  end
  opts.on("-d", "--description=STRING", "Description to use for publish operations") do |d|
    @options[:description] = d
  end
  opts.on("-n", "--noop", "do not actually execute anything") do
    @options[:noop] = true
  end
  opts.on("-f", "--force", "force actions that otherwise would have been skipped") do
    @options[:force] = true
  end
  opts.on("--wait", "wait for started tasks to finish") do
    @options[:wait] = true
  end
  opts.on("--sequential [NUM]", OptionParser::DecimalInteger, "wait for each (or NUM) started task(s) to finish before starting the next one") do |s|
    @options[:wait] = true
    @options[:sequential] = s || 1
  end
  opts.on("--checkrepos", "check repository content was changed before publish") do
    @options[:checkrepos] = true
  end
  opts.on("--verbose", "Get verbose logs from cvmanager") do
    @options[:verbose] = true
  end
  opts.on("--no-verify-ssl", "don't verify SSL certs") do
    @options[:verify_ssl] = false
  end
end
optparse.parse!

if ARGV.empty?
  puts optparse.help
  exit
end

#@yaml = YAML.load_file(@options[:yamlfile])
#
#if @yaml.has_key?(:settings) and @yaml[:settings].is_a?(Hash)
#  @yaml[:settings].each do |key,val|
#    if not @options.has_key?(key)
#      @options[key] = val
#    end
#  end
#end

@defaults.each do |key,val|
  if not @options.has_key?(key)
    @options[key] = val
  end
end

if not @options[:user]
  @options[:user] = ask('Satellite username: ')
end

if not @options[:pass]
  @options[:pass] = ask('Satellite password: ') { |q| q.echo = false }
end

# sanitize non-complete config files
#[:cv, :ccv].each do |key|
#  if not @yaml.has_key?(key)
#    @yaml[key] = {}
#  end
#end
#[:publish, :promote].each do |key|
#  if not @yaml.has_key?(key)
#    @yaml[key] = []
#  end
#end
#

oauth_consumer_key = '' # Dummy consumer key, change to yours
secret_key = '' # Dummy shared secret, change to yours
oauth_nonce = Random.rand(100000).to_s
oauth_signature_method = 'HMAC-SHA1'
oauth_timestamp = Time.now.to_i.to_s
oauth_version = '1.0'

base_string = 'GET&' + CGI.escape(@options[:uri]) + '&' + CGI.escape(parameters)
oauth_signature = CGI.escape(Base64.encode64("#{OpenSSL::HMAC.digest('sha1',secret_key, base_string)}").chomp)

@authenticator = ApipieBindings::Authenticators::Oauth.new(oauth_consumer_key,secret_key, {'FOREMAN-USER' => 'admin','oauth_nonce' => oauth_nonce, 'oauth_timestamp'=> oauth_timestamp, 'oauth_signature_method' => oauth_signature_method,'oauth_version' => oauth_version, 'oauth_signature' => oauth_signature})

@api = ApipieBindings::API.new({:uri => @options[:uri], :api_version => '2', :timeout => @options[:timeout], :authenticator => @authenticator},  {:verify_ssl => @options[:verify_ssl]})
#@api = ApipieBindings::API.new({:uri => @options[:uri], :api_version => '2', :timeout => @options[:timeout], :authenticator => @authenticator, :logger => Logging.logger(STDOUT)},  {:verify_ssl => @options[:verify_ssl]})



def puts_verbose(message)
  if @options[:verbose]
    puts "    [VERBOSE] #{message}"
  end
end

def get_lifecycle_environment(le_name)

  lifecycle_environment = []
  # https://satellite/apidoc/v2/lifecycle_environments.html
  if le_name != "Library"
	  req = @api.resource(:lifecycle_environments).call(:index, {:organization_id => @options[:org], :full_results => true, :library => false, :name => le_name})
  else
	  req = @api.resource(:lifecycle_environments).call(:index, {:organization_id => @options[:org], :full_results => true, :library => true, :name => le_name})
  end


#  puts_verbose JSON.pretty_generate(req)
  if req['total'] == 0
	  fail "Couldn't find any Lifecycle Environments"
  end
  if !req['results'].empty?
	  #lifecycle_environment = le.concat(req['results']).first
	  lifecycle_environment = req['results'].first
	  return lifecycle_environment
  else
	  fail "Couldn't find Lifecycle Environments, but the results wasn't 0"
  end
end

def get_previous_lifecycle_environment(le_name)
	if lifecycle_environment = get_lifecycle_environment(le_name)
		if not lifecycle_environment['prior']['name'].empty?
			puts_verbose("Prior LE for #{lifecycle_environment['name']} is #{lifecycle_environment['prior']['name']}")
			return get_lifecycle_environment(lifecycle_environment['prior']['name'])
		end
	else
		fail "Didn't get Lifecycle Environment"
	end
end



def get_cv_version_in_lifecycle_environment(cv_name, le_name)

  lifecycle_environment = get_lifecycle_environment(le_name)
  le_id = lifecycle_environment['id']
  puts_verbose "Lifecycle Environment #{le_name} has id: #{le_id}"

  cvs = []
  req = @api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true})
  cvs.concat(req['results'])
  while (req['results'].length == req['per_page'].to_i)
    req = @api.resource(:content_views).call(:index, {:organization_id => @options[:org], :full_results => true, :per_page => req['per_page'], :page => req['page'].to_i+1})
    cvs.concat(req['results'])
  end

  cvs.each do |cv|
    keep = []
    if cv['name'] == cv_name 
      puts_verbose "Inspecting #{cv['name']}"
      cv['versions'].sort_by { |v| v['version'].to_f }.reverse.each do |version|
        if not version['environment_ids'].empty?
          puts_verbose " #{cv['name']} v#{version['version']} (id: #{version['id']}) is published to the following environments: #{version['environment_ids']}"
	  if version['environment_ids'].include?(le_id)
	  	puts_verbose "FOUND: #{cv['name']} v#{version['version']} (id: #{version['id']}) is in Lifecycle Environment ID #{le_id}"
		return version
	  end
         next
        end
      end
    end
  end
end

def promote(cv_version_id, lifecycle_environment_id)
  tasks = []

  req = @api.resource(:content_view_versions).call(:promote, {:id => cv_version_id, :environment_id => lifecycle_environment_id})
  tasks << req['id']
  wait(tasks)
end

def wait(tasks)
  need_wait = tasks
  if @options[:wait]
    last_need_wait = []
    silence = false
    wait_secs = 0
    while not need_wait.empty?
      if wait_secs < 60
        wait_secs += 10
      end
      puts "waiting #{wait_secs} for pending tasks: #{need_wait}" unless silence
      sleep wait_secs
      last_need_wait = need_wait
      need_wait = []
      tasks.each do |task_id|
        req = @api.resource(:foreman_tasks).call(:show, {:id => task_id})
        if req['pending']
          need_wait << task_id
        end
      end
      if (wait_secs >= 60 and (last_need_wait.sort == need_wait.sort))
          puts "Silencing output until there's a task status change..." unless silence
          silence = true
      else
          silence = false
      end
    end
  end
  return need_wait
end

action = ARGV.shift
if action == 'promote'
	puts "Lifecycle to recieve new content: #{@options[:lifecycle]}"
	puts "Content View to be targeted: #{@options[:content_view]}"
	
	next_lifecycle_environment       = get_lifecycle_environment(@options[:lifecycle])
	prior_lifecycle_environment = get_previous_lifecycle_environment(@options[:lifecycle])

	puts_verbose "Fetching CV version from previous Lifecycle Environment: #{prior_lifecycle_environment['name']}"
	cv_version 		    = get_cv_version_in_lifecycle_environment(@options[:content_view], prior_lifecycle_environment['name'])
	puts_verbose "Found CV Version: #{cv_version['id']}"


	# Check if the CV version already exists in the environment we try to promote to
	if cv_version['id'] == get_cv_version_in_lifecycle_environment(@options[:content_view], @options[:lifecycle])['id']
		puts "Content View #{@options[:content_view]} Version: #{cv_version['version']} (cvv-id: #{cv_version['id']}) already exists in Lifecycle Environment #{@options[:lifecycle]}"
		puts "No action needed.."
	else
		puts "Content View #{@options[:content_view]} Version: #{cv_version['version']} (cvv-id: #{cv_version['id']}) will be promoted to Lifecycle Environment #{@options[:lifecycle]}"
		promote(cv_version['id'],next_lifecycle_environment['id'])
	end

end


